{"pages":[{"title":"","text":"Email Name Text Submit","link":"/Contact/index.html"},{"title":"","text":"Privacy Policy sishida21.github.ioは、Amazon.co.jpアソシエイトの参加者です。","link":"/privacy_policy/index.html"},{"title":"","text":"Shoichi IshidaPharmacist, Ph.D. student4-Year Ph.D. ProgramSynthetic Medicinal Chemistry, Graduate School of Pharmaceutical Science, Kyoto UniversityResearch Interests Computer-aided synthesys planning Application of machine learning for life sciences Cheminformatics Bioinformatics Development DEFMap: Dynamics Extraction From cryo-EM Map (GitHub) kGCN: A graph-based deep learning framework for life science (GitHub) Reaction template extractor (GitHub) Papers S. Ishida, K. Terayama, R. Kojima, K. Takasu, Y. Okuno, Prediction and Interpretable Visualization of Retrosynthetic Reactions Using Graph Convolutional Networks, Journal of Chemical Information and Modeling, 2019. R. Kojima, S. Ishida, M. Ohta, H. Iwata, T. Honma, Y. Okuno, kGCN: A Graph-Based Deep Learning Framework for Chemical Structures, Journal of Cheminformatics , 2020 S. Matsumoto*, S. Ishida*, M. Araki, T. Kato, K. Terayama, Y. Okuno, Extraction of Protein Dynamics Information Hidden in Cryo-EM Map Using Deep Learning, bioRxiv, 2020 R. Shibukawa*, S. Ishida*, K. Yoshizoe, K. Wasa, K. Takasu, Y. Okuno, K. Terayama, K. Tsuda, CompRet: A comprehensive recommendation framework for chemical synthesis planning with algorithmic enumeration, ChemRxiv, 2020 “*” denotes these authors contributed equally. International Conference and Workshop R. Kojima, H. Iwata, S. Ishida, M. Ikeguchi, Y. Okuno, “A Prediction Framework for Drug Discovery Using Graph Convolutional Networks”, 5th International Symposium for Medicinal Sciences (ISMS) (poster), Mar., 2019. Domestic Conference and Workshop 石田祥一, 寺山慧, 小島諒介, 高須清誠, 奥野恭史, “Interpretable Reaction Prediction using Graph Convolutional Networks”, CBI学会2019年大会, 2019/10/22~24, (oral) 石田祥一, 寺山慧, 小島諒介, 高須清誠, 奥野恭史, “GCN 記述子とモンテカルロ木探索を用いた合成経路予測”, CBI学会2019年大会, 2019/10/22~24, (oral: sponsored session) 池口茉莉恵, 石田祥一, 小島諒介, 岩田浩明, 奥野恭史, “Prediction of Compound-Protein Interactions and Visualization Based on Graph Convolutional Networks”, CBI学会2019年大会, 2019/10/22~24, (poster) 渋川亮祐, 石田祥一, 寺山慧, 美添一樹, 奥野恭史, 津田宏治, “証明数探索を用いた化合物合成経路列挙アルゴリズム”, 第21回情報論的学習理論ワークショップ, 2018/11. (oral: 学生優秀プレゼンテーション賞 ファイナリスト) Review article 寺山慧, 石田祥一, 奥野恭史, “AIによる逆合成解析に向けて”, 月刊「細胞」, Vol.51, No.7, pp.12-15, 2019/5. 寺山慧, 石田祥一, 奥野恭史, “囲碁AIから逆合成解析へ−情報科学からのアプローチ”, 化学, Vol.74 No.2, pp.36-40, 2019/1.","link":"/about/index.html"}],"posts":[{"title":"Ubuntu server 18.04からWebDAV経由でownCloudにアクセスする","text":"ownCloudに大量のファイルをアップロードする際、リモートサーバ からローカルに落としてからやるのは非常に効率が悪いです。そこでこの記事ではUbuntuサーバ18.04にownCloudをマウント〜ファイルのアップロードまでの手順を紹介します。 環境・必要パッケージ Ubuntu 18.04 (sudoが使えること) Davfs2 ownCloud 10.0.8 手順 davfs2のインストールとマウントポイントの作成 123sudo apt install davfs2sudo usermod -aG davfs2 &amp;lt;username&amp;gt; # add yourself to the davfs2 groupmkdir ~/owncloud davfs2の設定 1234mkdir ~/.davfs2sudo cp /etc/davfs2/secrets ~/.davfs2/secrets # create personal davfs2 configuration filesudo chown &amp;lt;username&amp;gt;:&amp;lt;username&amp;gt; ~/.davfs2/secretschmod 600 ~/.davfs2/secrets ownCloudのアカウント情報を ~/.davfs2/secrets（davfs2の設定ファイル）に記入 1example.org/owncloud/remote.php/webdav &amp;lt;username&amp;gt; &amp;lt;password&amp;gt; example.orgは自分が使っているownCloudサーバのURLに置換する。 /etc/fstab にownCloudのマウントの記入をする 1example.org/owncloud/remote.php/webdav /home/&amp;lt;username&amp;gt;/owncloud davfs user,rw,noauto 0 0 /etc/fstab の各フィールドは以下になります。スペースかタブ区切りなので、そこら辺を注意してください。また、今回は自動マウントはして欲しくないのでnoautoで設定しています。 1&amp;lt;device&amp;gt; &amp;lt;mountpoint&amp;gt; &amp;lt;type&amp;gt; &amp;lt;options&amp;gt; &amp;lt;dump&amp;gt; &amp;lt;fsck&amp;gt; ownCloudのマウント 1mount ~/owncloud これでownCloudがUbuntu server にマウントできます。これ以降はmount と umountをするだけで良いです。またファイルのアップロードをする際はrsyncを使うと差分のアップロードとかができるので良いです。 終わりにローカルPCで基本作業をしない人はこの設定をすると楽なのでおすすめです。 ハプニング最初にownCloudのマウントポイントを、別でマウントしているディレクトリに設定した際にbootが失敗する事態になりました。僕のようにならないよう、事前にfstabの仕組みをしっかり理解した上で作業するようにしてください。。 参照Davfs2 Accessing ownCloud Files Using WebDAV fstab","link":"/2020/02/15/access-owncloud-using-webdav-on-ubuntu18-04/"},{"title":"手持ちのPCにSSDを増設〜マウントするまでの流れ（Ubuntu 18.04）","text":"研究室に余っているSSDがあったので、初めてPCへの増設作業をしました。この記事ではその際に調べたことと増設作業についてまとめていきます。 環境・使用したもの LEVEL-FM29-LCi9XE-XYVI Ubuntu 18.04 空き拡張スロット：PCI Express3.0 [x16] × 2 (一つはx8動作) インテル®SSD660Pシリーズ (M.2 SSD) GLOTRENDS M.2 NVMe M.2 SSD（キーM）アダプタカード M.2 PCIe アダプター 手順M.2 SSDをM.2 PCIe アダプターに取り付けるPCの空き拡張スロットはPCIe3.0[x16]規格だったので、M.2 SSDを取り付けられるように変換アダプタが必要です。今回はとりあえず手ごろなアダプタにしました。購入する際の注意点としては x2, x4, x8, x16で大きさが違う ヒートシンクをつける（SSDは発熱がすごいらしい） あたりかなと思いました。 PCの空き拡張スロットへ取り付け取り付け作業はこちらのサイトを参考にしました。簡単にできます。 取り付けたSSDをマウントする 増設したSSDのデバイス名の確認 1sudo fdisk -l このコマンドを打つとずらずらとデバイスについての情報が出てくるので、そこから取り付けたSSDのデバイス名を見つけます。今回はこんな感じで /dev/nvme3n1に割り当てられていました。 123456789Disk /dev/nvme3n1: 1.9 TiB, 2048408248320 bytes, 4000797360 sectorsUnits: sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisklabel type: gptDisk identifier: B7C3AC72-0806-487B-B088-8C6C4C53BCD5Device Start End Sectors Size Type/dev/nvme3n1p1 65535 4000780679 4000715145 1.9T Linux filesystem ※もしパーティションを作成していなかったら（/dev/####p1みたいにp#が表示されない）、partedコマンドを使ってパーティションを作成してください。 1で調べたデバイス名のUUIDを調べる デバイス名は起動するたびに変わる可能性があるらしく、UUIDで起動時マウントを設定してあげるのが安全だそうです（こちらのサイト参照）。以下のコマンドで確認できる。 1ls -l /dev/disk/by-uuid/ 調べたUUIDはメモっておく。 /etc/fstab にて起動マウントの設定 下記のように追記する。 1UUID=&amp;lt;調べたUUID&amp;gt; &amp;lt;マウント先のディレクトリ&amp;gt; &amp;lt;フォーマット&amp;gt; defaults 0 0 事前に /etc/fstabの書式については把握しておくと良いです。こちらの記事にも記載してあるのでご覧ください。 終わりに初めての増設作業で、わからないことばかりでかなり調べました。一回できてしまうと簡単な流れなのですが、かなりの試行錯誤をしました。。 参照手順8！グラフィックボードなどの拡張ボードの取り付け！ Linux ハードディスクのデバイス名を確認する 起動時のマウントは UUID にすべき！","link":"/2020/02/16/add-ssd-to-server/"},{"title":"本の自炊（PDF化）〜管理方法(iPhone, iPadユーザー向け)","text":"私はいつも年末年始に一年間で購入した書籍をPDF化（自炊）して処分・整理しています（Kindleで売られていない書籍はまだまだ多いです）。 そこでこの記事では私が書籍の自炊をする際に使用している道具・アプリの紹介と手順をまとめていきます。 使用道具・アプリケーション ScanSnap iX500 DURODEX 自炊裁断機 ブラック 200DX iCloud(ストレージプラン50GB) Booklover 自炊手順 裁断機で書籍の背の部分を切り落とす 分厚い書籍は一度カッターで分割してから カバーも別で表・裏表紙をカッターで切り分ける（PDFの先頭がサムネイルに使う） ScanSnapで読み込みPDF化 スキャン前にきちんと裁断されているか確認する 1枚目は表表紙をスキャンするようにする ページ数にもよるが大体1冊5~10分くらい(25枚/分) iCloudのBookloverのフォルダに追加する ファイル名でメタデータの管理をする ファイル名からのメタデータ抽出→ジャンル→「抽出条件」を「1番目の()内」に変更しておく [著者名]_(ジャンル名)_書籍名.pdfで保存 各デバイスでメタデータの抽出 ファイル名からのメタデータ抽出→「すべての本のファイル名からメタデータを抽出」を実行 おわりに 以上が一連の流れになります。本の自炊はかなり体力を使うので、裁断等は外注してしまうのもありだと思います。 私は今までの教科書等も全て自炊してしまい処分しています。自炊してよかったなと思うところは、 教科書・専門書等普段は重くて持ち歩けないものもスマホ・タブレットでサッと確認できる OCRも使えば検索ができるようになる 引越しのたびに本を移動させる手間がなくなったあたりです。 もし興味があるけど購入するのはちょっとなあという人は、DMMで自炊キットのレンタルなどもありますので、 そちらを利用してみるのもアリだと思います（私は利用したことないので評価はできないですが。。） 以上で、私の書籍の自炊方法・管理の紹介を終わります。","link":"/2020/01/02/book-to-pdf/"},{"title":"ChemAxon Academic License取得方法＆インストール方法","text":"今回はChemAxonのアカデミックライセンスの取得方法とライセンスのインストール方法について紹介します。 有償のため（アカデミックはフリー）、あまりChemAxonを使う人がいないのか、日本語で紹介した記事が見当たらないのでまとめておこうと思った感じです。 上述した通り、アカデミア所属の方は無償（条件あり）で使用できるので、興味がありましたら気軽に試してみてください。 ChemAxonについてケム・バイオインフォ向けの様々なツールを提供している企業。 基本的なユーザーはGUIアプリケーションを利用している（と思われる）が、API（Java, .NET）も提供しておりインフォマティシャンも利用しやすくなっている。 APIドキュメントは揃って入るものの、exampleが充実しているとはいえず、ドキュメントから使い方を察せる能力は必要だと思う。 基本的には有償のソフトウェア（アカデミックフリー）なので、OSSにはない痒いところに手の届く機能が多数あるなと感じる。 Academic Licenseの取得方法ここからChemAxonのアカウントを作成し、Academic Licenseの申請をします（数日で返事があると思います） 下記図の APPLY NOW から申請することができます。 また、申請時には簡単な使用目的を記載する必要があります。 Install方法(for Mac, Linux)ライセンスのインストールインストール方法に関しては4つの方法が公式では挙げられていますが、私はAutomatic installで実施しています。 licenseファイルをダウンロードして、ファイル名を license.cxl とします。そして $HOME/.chemaxon 以下にlicenseファイルを配置すれば完了です。 （Pathとしては $HOME/.chemaxon/license.cxl となります。これ以外は認証されません） JChem EnginesのインストールChemAxonは様々なアプリケーションを提供していますが、とりあえずJChem Enginesをインストールしておけばそれらが大体一括でインストールされます。 このURLからインストールしたいplatformのインストーラーをダウンロードし、インストールをしてください。 インストールの確認インストールされたJChemのバージョン確認 1versioninfo インストールされたライセンスの状態確認 1license -l all | less Academic Licenseで使用可能なChemAxon products見づらいですが、とりあえず列挙しておきます。Marvin Applets, Marvin Beans, Instant JChem, JChem Base, Standardizer, Screen, Reactor, JKlustor, Metabolizer, Markush Search, Protonation Plugin Group, Partitioning Plugin Group, Isomers Plugin Group, Markush Enumeration Plugin, Structure to Name Plugin, Name to Structure, JChem for Excel, Structure Search, IUPAC naming plugin, Web Services Server, Structure Checker, Predictor Plugin, MCES, 3D Screen, Molecular Descriptors, Instant JChem VIZ, ECFP/FCFP, Document to Structure, Structure to Name, NMR Predictor, JChem for Office, Markush Editor, Solubility Plugin, Structural Calculations 終わりに簡易的ではありますが、ChemAxonのインストール方法についてまとめました。 全部は紹介しきれないので、普段私が使っているものについて今後まとめていこうと思います。 インストール方法が端折りすぎててわからない等ありましたら、連絡いただければ追記しようと思います。 参照ChemAxonACADEMIC LICENSE CONDITIONS","link":"/2020/04/09/chemaxon-academia-install/"},{"title":"Matplotlibでラベルと軸を調整して論文用のグラフの見栄えを良くする方法","text":"Matplotlibを使ってグラフを作成したことがある人は誰しもが感じてきたと思いますが、デフォルトの設定がイケてない状態です（ラベルの文字が小さく、文字と軸が近すぎてかなり見にくい）。 論文のFigureとしてそのまま使うのは流石に厳しいと思いますので、私のMatplotlibのグラフの調整方法についてまとめることにしました。 まずGoogle先生に聞いてみるとちらほらグラフのラベル調整をしている記事が見つかると思います。 ですがMatplotlibの書き方は人によって異なる（plt.##で書く人、fig, ax = plt.subplots()で書く人）ので、そのまま使えないことも多いと思います。 この記事では、個人的にはオブジェクト指向が好みなので、fig, ax = plt.subplots() の書き方で説明します。 上で言っていることがわからない人で、Matplotlibを理解しつつ書きたいなという人は「早く知っておきたかったmatplotlibの基礎知識、あるいは見た目の調整が捗るArtistの話」を読むとある程度理解できるようになると思います。 かなり丁寧にわかりやすく解説されている素晴らしい記事です。 環境 Python: 3.6.6 Matplotlib: 2.2.3 Numpy: 1.15.1 Pythonの環境構築がまだできてないという方は「Python環境構築(pyenv + pyenv-virtualenv)」を参考にしてください。 調整する部分 論文に使われる図は基本的にはっきりとした印象を持つことが多いと思います（IF上位のジャーナルは特に）。 今回はトップジャーナルに投稿する際に意識した以下の4つのポイントについての調整法を紹介します。 ラベルサイズを大きくする 軸ラベルを軸から離す 目盛りラベルを軸から離す 枠線（軸）を太くする デフォルト設定のグラフ 以下にデフォルト設定のサンプルコードとその出力を記載します。 Code123456789101112131415161718import numpy as npimport matplotlib.pyplot as plt# sample datanp.random.seed(123)x = np.random.randn(100)y = np.random.randn(100)# create a figurefig = plt.figure(figsize=(8, 8))ax = fig.add_subplot(1,1,1)ax.scatter(x, y)ax.set_xlabel(\"Random-sampled X\")ax.set_ylabel(\"Random-sampled Y\")fig.show() Output 調整後のグラフ 次に設定を調整したサンプルコードとその出力を記載します。 デフォルト設定のグラフと見比べてみてください。 ほんの少しだけ手を加えてあげるだけで見やすさが段違いに変わると思いませんか？ Code12345678910111213141516171819202122232425import numpy as npimport matplotlib.pyplot as plt# sample datanp.random.seed(123)x = np.random.randn(100)y = np.random.randn(100)# create a figurefig = plt.figure(figsize=(8, 8))ax = fig.add_subplot(1,1,1)ax.scatter(x, y)# 以下から追加分# 枠線（軸）を太くするfor axis in ['top','bottom','left','right']: ax.spines[axis].set_linewidth(4)ax.xaxis.set_tick_params(direction=\"out\", labelsize=20, width=3, pad=10) # x軸の目盛りの調整ax.yaxis.set_tick_params(direction=\"out\", labelsize=20, width=3, pad=10) # y軸の目盛りの調整ax.set_xlabel(\"Random-sampled X\", fontsize=30, labelpad=20, weight='bold') # x軸のラベルの調整ax.set_ylabel(\"Random-sampled Y\", fontsize=30, labelpad=20, weight='bold') # y軸のラベルの調整fig.show() Output 終わりに 以上、簡単ですがグラフのパラメータの設定方法について紹介しました。 Matplotlibは様々なパラメータが存在していて一筋縄では求めてるパラメータに行き着かないのですが、やりたいことはほぼできるはずなので、諦めずにMatplotlib APIから探してみてください。 またGoogle先生に聞くと、そんな複雑なことする必要があるのかなあと疑問に思うことが多々ありますが、きちんと調べれば簡単にできることがほとんどだと思いますので時間が許す範囲で調べるって感じですね。 オブジェクト指向の書き方をしている人は、追記分のコードをコピペするだけで簡単にグラフの調整ができるのでぜひお使いください。 今回説明がなかったものでも、もし紹介して欲しい処理がありましたらコメントしていただければ可能な限り対応しようと思います。 最後に、かなり基礎的な内容にはなりますが「Matplotlib&amp;Seaborn実装ハンドブック」という本もあります。 Matplotlibを使って自分が書きたいグラフをどうやって書けば良いのか全くわからないという人はそちらも参考にすると良いかもしれません。 それでは。","link":"/2020/05/11/graph-settings-for-paper-with-matplotlib/"},{"title":"はじめに","text":"ケムインフォを中心に創薬関連の研究している学生です。このブログには備忘録的に以下に関連するトピックを不定期にまとめていくつもりです。 Chemoinformatics Machine Learning Programming Medicine etc. 私についてはこちらを参照ください。","link":"/2019/12/09/intro/"},{"title":"HomebrewでMacのパッケージ・アプリケーションの管理","text":"Macのアプリケーション管理は Homebrew を用いると便利です。 macOSにないパッケージは大体これでインストール可能なのと、 Homebrew-cask を使えばGUIアプリケーション（Google Chrome、Office系アプリ、etc.）もインストール・管理が可能です。 また、インストールしたものは Homebrew-file を使えばgit管理ができて新しいMacへの移行も楽になります。 MacユーザーならHomebrewを使わない理由はないくらいには便利なので、ぜひ以下の内容を参考に導入してみてください。 Homebrew macOSにないパッケージをインストールしてくれるmacOS用パッケージマネージャーです。 HomebrewThe Missing Package Manager for macOS (or Linux). Installインストールは下記をターミナルで実行するだけで完了です。 1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" このままだとbrewコマンドのtab補完が効かないので、以下の通り ~/.bash_profile に追記して bash-completion をインストールします。 ~/.bash_profile12345678910if type brew &amp;&gt;/dev/null; then HOMEBREW_PREFIX=\"$(brew --prefix)\" if [[ -r \"${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh\" ]]; then source \"${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh\" else for COMPLETION in \"${HOMEBREW_PREFIX}/etc/bash_completion.d/\"*; do [[ -r \"$COMPLETION\" ]] &amp;&amp; source \"$COMPLETION\" done fifi 1brew install bash-completion あとは ~/.bash_profile を再読み込みするか新しいターミナルを立ち上げればtab補完が使えるようになります。 基本コマンドコマンド一覧は公式ドキュメントを参照してください。 色々と用意されていますが基本は、 brew install fomula brew search fomula brew uninstall fomula brew doctor # brew関連のtrouble shootingをしてくれる あたりが使えれば問題ないと思います。 BrewfileHomebrew用のGemfileです。 ここにbrewを通してインストールしたパッケージの依存関係が記載されます。 Brewfileは後述のHomebrew-fileを使って管理します。 Homebrew-cask macOSのGUIアプリケーション（Google Chrome、Office系アプリ、etc.）もHomebrewで管理できるようにしてくれる拡張パッケージです。 大体のGUIアプリケーションはこれでインストールできるので、これを使うとGUIアプリケーションの管理も楽になります。 最新のHomebrewだと標準で搭載されていると思います。 なのでインストールはTab補完の設定だけ記載します。 Install1brew install brew-cask-completion ~/.bash_profile への設定はHomebrewのtab補完の設定時にやっているもので大丈夫です。 基本コマンド brew cask install application brew cask uninstall application brew cask list # Homebrew-caskを通してインストールしたアプリ一覧の表示 Homebrew-file Brewfileを管理してくれるパッケージです。 私はこれを使ってBrewfileをgit管理することでバックアップをとっています。 Install1brew install rcmdnk/file/brew-file ~/.bashrc に以下を追加する（※ この設定は私のMacではうまく機能しないので、使用していません。） ~/.bashrc123if [ -f $(brew --prefix)/etc/brew-wrap ];then source $(brew --prefix)/etc/brew-wrapfi Brewfileの作成・管理公式ドキュメントにはDropboxとGitでの管理方法が記載されていますが、私はGitで管理していますのでその方法について記載します。※公式ドキュメントではbrew-wrapが設定できている前提で記載されています。今回は設定していないのでbrew-fileを使っています。 まずは自分のGitのレポジトリを設定します。 1brew-file set_repo 以下のコマンドを実行すると ~/.config/brewfile/Brewfile にBrewfileが作成されます。 1brew-file init そして以下のコマンドを実行すると設定したGitにBrewfileがpushされます。 1brew-file update 終わりに Homebrewでのパッケージ・アプリケーションの管理についてまとめました。 本当は私の使っているおすすめアプリまで紹介しようと思いましたが、記事のまとまりがなくなるのでそれは別の記事で紹介します。 参照 Homebrew Brewfile Homebrew Shell Completion Homebrew-cask homebrew-file","link":"/2020/01/14/homebrew/"},{"title":"LaTeXからWordに変換する方法(Mac)","text":"Overleafで論文のやり取りをする際、有料版でないとコメント機能が使えないです。そのためlatexからwordファイルに変換したいと思い調べました。 いくつかの方法（latex2rtf, pandoc, GrindEQ）がよくヒットしますが、一番シンプルかつ他にも汎用性のあると感じた方法を以下に記載します。 ※参照のサイトではMacではできずWindowsのみで今回の方法が機能したと記載されてますが、Macでもできたのでまとめました。 環境 macOS Catalina: 10.15.1 Microsoft Word for Mac: 16.32 Overleaf 方法 1. Overleafに対象のlatexをアップロードし、PDFでダウンロードする。 2. そのPDFをWordで開く。 以上で終わりです。（WordでPDFが開けるということを知っている人からすれば当たり前な方法ですかね。。） 終わりに さすがにFigureとかは崩れてしまうので完璧とまでは言えないですが、コメントのやり取り程度の用途でしたら十分です。 参照 In a Word: LaTeX to Word and vice versa Exporting your work from Overleaf pandoc GrindEQ latex2rtf","link":"/2019/12/15/latex-to-word/"},{"title":"【2020年】iPad Pro用Magic Keyboardのレビューとおすすめトラックパッド・キーボード設定","text":"4月下旬から発売されていたiPad Pro用Magic Keyboard(US配列)が届きました。 その使用感や良い点・悪い点、私のおすすめのトラックパッドとキーボードの設定についてまとめようと思います（随時更新する予定です）。 使用してみた感想 良い点 Macとほぼ同様のトラックパッド操作が可能 マウス操作が快適 キーボードの打鍵感が快適（個人の好み） iPadの角度調整ができる 改善してほしい点 Escキーがない（設定で割り当ては可能） Returnキーが小さい（もう少し横に長い方が嬉しい） 3本指タップで辞書のポップアップができない 全体的に満足度は高いです。 Macのトラックパッド（マウス）操作がiPadでできるだけでこうも快適になるとは思いませんでした。iPad Pro × Magic Keyboardの組み合わせはタブレットPCとほぼ同等と言っても問題ないと思います。 iPadに角度がつけれらるようになったので、以前と比べて長時間キーボード作業をしていても首が疲れにくくなったと思います。 巷ではMagic Keyboardは重いと言われていますが、私はほとんど気になりませんでした（Smart Keyboard Folioと比べて）。 それでも不満点はいくつかあり、個人的にはEscキーがないこと・Returnキーが小さいことが気になりました。Escキーに関しては後述のキーボード設定で他のキーに割り当てられるので問題ありませんが、Returnキーはどうしようもないですね。。（MacのUSキーボードもReturnキーがもう少し大きかったらなと思います） また、Macのトラックパッドでかなり頻用している、3本指タップで辞書が立ち上がる機能はやはり使えなくて残念でした。 これが使えるようになったら論文読むのがかなり捗るんですけどね。。 おすすめのトラックパッド・キーボード設定 iPadのデフォルトのトラックパッド・キーボード設定だと入力速度が遅く、またEscキーが割り当てられていないです。 またトラックパッドはタップでクリックを設定もされていないです。 その3つを設定するだけで快適に使用できるようになったので、ぜひ設定することをおすすめします。 Escキーの設定 設定アプリから次の順に進める【一般 &gt; キーボード &gt; ハードウェアキーボード &gt; 修飾キー】 Caps LockキーをControlに割り当てる ControlキーをEscキーに割り当てる キー入力速度の設定 設定アプリから次の順に進める【アクセシビリティ &gt; キーボード &gt; キーのリピート】 キーのリピートをオン キーのリピート間隔を0.03秒、リピート入力認識までの時間を0.20秒(いずれも最小値)に設定 トラックパッドの設定 設定アプリから次の順に進める【一般 &gt; トラックパッド】 軌跡の速さを一番右に（ウサギマークの方） タップでダブルクリックをオン 終わりに 以上簡単ではありますが、iPad用Magic Keyboardについてのレビュー・おすすめのトラックパッド・キーボードの設定をしました。 まだ届いてから全然使ってない状態ですので、これから長期的に使用していく中で他のアプリとの使用感の兼ね合い等も含めて気になった点は随時更新していこうと思います。 何か他にもおすすめの使い方や設定がありましたらコメント欄にて教えてください。それでは。 参照iPadのためのキーボード（Apple公式HP）","link":"/2020/05/07/magic-keyboard-review/"},{"title":"【iPad Pro ×PaperShip】Mendeley管理のPDF論文に快適に書き込む方法","text":"皆さんは論文をiPadで読むときに、紙に書き込む要領でiPadでも書き込みがしたいと思ったことはありませんか？ 私は論文はMendeleyで管理しているのですが、残念ながら公式アプリではApple Pencilで直に論文に書き込むことはできません。 今まで色々と試してみたのですが、PaperShipというアプリが最近のアップデートでかなり使えるものになり、個人的にはこれが一番使いやすいと思ってます。 そこでこの記事ではiPad Pro ×Apple Pencil ×Mendeley ×PaperShipでの論文書き込み術についてまとめようと思います。 必要なもの iPad Pro： 12.9インチがA4サイズで違和感なく読めるのでおすすめ Apple Pencil： 第二世代が充電しやすくなってておすすめ Mendeley： 定番の論文管理ツール。無料 PaperShip： 今回のメイン。iPadアプリ。有料（$9.99 / 2020/05/05現在） 早く手順だけ知りたい人向け細かい説明は不要だと言う人のために、手順だけ先に記載しておきます。 Mendeleyに論文を追加する際にPDFも添付しておく PaperShipにMendeleyアカウントでログイン アプリ内で論文をダウンロードし、思うがままに書き込む これだけです。 それでは以下からそれぞれの説明をしていきます。 各ツールの概要MendeleyとはMendeleyとは、Elsevierが提供している無料の文献管理ツールです。 他にもEndNoteやreadcubeなど有償の文献管理ソフトがありますが、固定費がかかるのと、あまり使い勝手も変わらないなと思い僕はMendeleyを使ってます。 Mendeleyの基本的な使い方はこちらを参考にしてください。 PaperShipとは文献管理ツール（Mendeley、zetero）で管理されている論文に書き込みを可能にするPDF annotationツールです。 余計なツール管理は一切不要で、実質的な手間はMendeleyで論文を管理するところだけです。 PDFへの書き込み、ハイライトなど必要な機能は一通り揃っています。 具体的な使用しているイメージを以下の通りです。 （図に使わせていただいた論文はこの前Natureに掲載された論文で、CC-BYライセンスでbioRxivにあがっていたものです。 この論文自体も面白いので興味ある方はぜひ。） 最近のアップデートまでは、全然メンテナンスされてなく使い物にならなかったのですが、最近のアップデートから素晴らしいツールへと返り咲きました。 今のところなんの目立った不具合もなくiPadで書き込みができているので本当にオススメです。 PaperShipはiPad版とMac版があり、それぞれ別で購入する形式なのですが、私はiPad版だけ買っています（大体1000円くらい）。 書き込んだ論文はPaperShip上でしか読めないため、PCでも読みたい場合はMac版も買うのが良いと思います。 PaperShipを使うまでの手順Mendeleyで論文管理準備というほどのことでもないのですが、Mendeleyに論文を保存するときにPDFを追加するようにするようにしてください。 PaperShipに同期した際に、PDFを登録していないとダウンロードができず論文の中身が読めません。 また、PaperShipにはMendeleyでのディレクトリ構成がそのまま同期されるので、Mendeley上で論文を整理しておくと良いです。 PaperShipでの操作PaperShipにMendeleyのアカウントでログインすると、自動でMendeleyと同期されて使えるようになります。 あとは読みたい論文をタップしてPDFをダウンロードすればすぐ書き込めます（上図を参照）。 具体的な使用感としては、Apple Pencilでの滑らかな描き心地も維持されており、ストレスレスに論文を読んで書き込めます。 UI自体もシンプルで洗練されており、他のPDFアノテーションツールよりも直感的にわかりやすいなと思います。 まとめわざわざ使い方としてまとめるまでもないくらいPaperShipは簡単に使うことができます。 また、Mendeleyの拡張ツールみたいなものなので管理はMendeleyの方ですれば良いだけとかなり楽です。 個人的にはiPad ProとApple Pencilを買ってよかったと思える素晴らしいツールの一つです。 ぜひ気になった方はPaperShipを試してみてください。 参照 Mendeley PaperShip A SARS-CoV-2-Human Protein-Protein Interaction Map Reveals Drug Targets and Potential Drug-Repurposing: bioRxiv, doi: https://doi.org/10.1101/2020.03.22.002386 (CC-BY license)","link":"/2020/05/05/organize-articles-with-ipad-and-papership/"},{"title":"Python環境構築(pyenv + pyenv-virtualenv)","text":"普段私はpyenv + pyenv-virtualenvの組み合わせでpythonの環境管理をしています。今回の記事ではその設定方法について記載していきます。 記事中で登場するファイルをダウンロードすればそのまま使用できます。 動作確認はLinux, MaxOSでしてます。 Install pyenv and pyenv-virtualenv 下記のスクリプトをダウンロードして、 (追記：8行目の一部が数式として表示されているため、コピペする際はview rowで表示させてからコピペしてください。) ターミナルを起動してダウンロードした場所に移動した後に、下記のコマンドを実行して下さい。 1bash install_pyenv.sh インストールが終わったら一度ターミナルを立ち上げ直して下さい。 これでpyenv + pyenv-virtualenvのインストールは完了です。 Set virtual environment Install minicondapython環境は全てpyenv-virtualenv上で管理しています。そうすることで環境の使い捨てが簡単になるので便利です。 12pyenv install miniconda3-4.2.12pyenv shell miniconda3-4.2.12 Create home environmentインストールしたminiconda上でcondaコマンドを使用すると、condaのバージョンが上がってpyenvがおかしくなります。 それを防ぐために仮想home環境を作成し、そこをデフォルトの作業環境とします。 12conda create -n home python=3.6pyenv global miniconda3-4.2.12/envs/home Create test environmentあとはテーマ毎等で仮想環境を作って個別に管理します。 そうすることで各環境を最小構成にすることができて干渉する心配もありません。ここでは試しにcalc環境を作成します。 123conda create -n calc python=3.6pyenv shell miniconda3-4.2.12/envs/calcconda install -c rdkit rdkit 簡単ではありますが、以上でpythonの環境構築についての解説を終わります。 何かご質問等ありましたらコメントにお願いします。","link":"/2019/12/09/pyenv/"},{"title":"rdMolDraw2Dを用いて単色の分子を描画する","text":"本記事では、RDKitを使って原子が色分けされていない単色の分子を描画する方法について記載します。 いろいろな記事で分子の描画方法については記載があったのですが、原子の色を調整する方法は載っていなかった&amp;やり方にたどり着くまで試行錯誤が必要だったのでまとめることにしました。 処理としては1行で済むので簡単です。 rdMolDraw2Dを使った基本的な分子の描画方法については、こちらのブログに丁寧にまとめられていますのでそちらを参照ください。 環境・ライブラリ python: 3.6 rdkit: 2019.09.2 ipython: 7.1.1 スクリプト 以下のスクリプトを実行すると黒色単色で分子を描画することができます。 このスクリプトの出力ファイルの中身は以下の通りです。 解説 分子の色を調整しているのは12行目の drawer.drawOptions().updateAtomPalette({k: (0, 0, 0) for k in DrawingOptions.elemDict.keys()}) になります。 DrawingOptions.elemDict.keys() で分子中の各原子のkeyを取得 取得したkeyに (0, 0, 0) を割り当てる。（これはRGB表記の黒を意味しています） 作成したdictを drawer.drawOptions().updateAtomPalette() を使ってatom paletteの更新 以上の処理で分子の色を調整しています。RGB表記の値を変えれば望みの色に分子を統一することが可能です。 12行目をコメントアウトすると、以下の通りヘテロ原子に色がついた分子の描画ができます。 他にも色々とdrawerのオプションは調整できますが、それはRDkitのAPIドキュメントを参照してください。 以上で終わります。 参照 RDKitでの構造式描画を詳しく解説rdkit.Chem.Draw.rdMolDraw2D module","link":"/2020/01/07/rdkit-draw-mol/"},{"title":"SSH先のサーバ上のjupyter notebookをローカルPCで操作する","text":"ローカルPCではスペック不足のため、計算資源豊富なリモートサーバーでjupyter notebookを使いたいと思う人は結構いると思います。 この記事ではそのためのjupyter notebookの設定方法について記載します。 (2020/05/13 パスワードの設定を追記しました。) 前提とする環境 リモートサーバーにsshでログインしている。 リモートサーバ ー上にpython環境が構築してあり、jupyterがインストールされている。 リモートサーバ ーでのjupyter設定 jupyter notebookのconfigファイルを生成する 1jupyter notebook --generate-config これで以下の場所にconfigファイルができる。$HOME/.jupyter/jupyter_notebook_config.py 生成したconfigファイルの書き換えc.NotebookApp.~の項目が記載されている行を探し、アンコメントして以下の通り書き換える。 c.NotebookApp.ip = ‘localhost’c.NotebookApp.open_browser = Falsec.NotebookApp.port = 8889c.NotebookApp.token = u’’ ノートブックを開くためのパスワードを設定する(セキュリティが気になる人・よくわかってない人は設定推奨)以下のコマンドでパスワードを設定し、ハッシュ化されたパスワードを取得する 1jupyter-notebook password $HOME/.jupyter/jupyter_notebook_config.json というファイルが生成されるので、そのファイルを開いて以下のハッシュ化されたパスワード（#の部分）をコピーする（#の部分はsha1:~のようになってるはずです）。 12345{ \"NotebookApp\": { \"password\": \"#####\" }} 「2. 生成したconfigファイルの書き換え」と同様にして以下プロパティの行をアンコメントした上で先ほどコピーしたパスワードを記載する。 c.NotebookApp.password = ‘#####’ 以上でサーバー側での設定は終わり。 ローカルPCからの操作 いつも通りsshする際に、ローカルフォワーディングする引数をつける。 例ではlocalhostのポート8889番をリモートサーバーの8889番につないでいる。 sshの引数は適宜追加して下さい。 1ssh -L 8889:localhost:8889 example.com このセッションを維持している状態で、jupyterを起動する。 普段使っているブラウザでhttp://localhost:8889/にアクセスするとリモートサーバで立ち上げたjupyter notebookに接続できる。 (パスワードを設定した人は、以下のようにパスワード入力画面が出てきますので、設定したパスワードを入力してください。) もし開けない場合でセキュリティソフトを使用している場合は、設定したポートが閉じられていないか確認してください。 終わりに 他にも色々と設定することは可能ですが、今回紹介した方法が最低限の設定だと思います。 もしセキュリティについてよくわからないという人はパスワードを設定することを強く推奨します。 この記事ではポートを8889に設定してますが、これは適宜変更してください（複数人が同じ設定だとコンフリクトしてしまいます）。 また、もう少し細かく設定したいという場合は参照のリンク先をご覧ください。 また、Jupyterについて勉強したいという方は、PythonユーザのためのJupyter［実践］入門がJupyter Notebookでできる（したい）ことをある程度網羅しているので、参考になるかと思います。 参照 リモートサーバの Jupyter Notebook を SSH Port Forwarding 経由で使う Config file and command line options (Jupyter notebook document) Running a notebook server","link":"/2019/12/12/remote-jupyter-notebook/"},{"title":"当番をランダムに決めて通知してくれるSlack BotをGoogle Apps Scriptで作った","text":"研究室での毎週の当番決めを自動化したいと思い、Google Apps Script(GAS)を使ったSlack botを作成しました。 すでに作ってる人いるだろうなと検索したましたが、スプレッドシートから指定の人数をランダムにピックアップして当番を回していくGASが見つけられなかったです（スプレッドシートの全員に毎回割り当てるGASを書いている人は結構いたのですが）。 なのでこの記事では、作成したSlack Bot用のGASの公開と解説をしようと思います（Slack Botへの連携はこちらのサイトをご覧ください）。 Slack Botの使い方最初にSlack Botの使い方を載せておきます。とにかく使えれば良いという人は スプレッドシートの作成 作成したシートのスクリプトエディタに下記のスクリプトをコピペ Settingに必要な情報の記入 をすれば使えます。それ以降で、GASを書いていて思ったこととかをつらつらと書いていきます。 用意するスプレッドシートのフォーマット 1列目：SlackのメンバーID（で括る） 2列目：SlackのUser名 3列目：選択されたかどうかのマスク値（最初は1に設定する）（0: 割り当て済み, 1: 割当されていない） Google Apps ScriptdoPost() がメインの処理になります。3~7行目に必要情報を追記してください。 Settingに記載する情報 spreadSheetID: ‘https://docs.google.com/spreadsheets/d/＜IDはここの部分＞/edit#gid=0' sheetName: 読み込みたいスプレッドシートのシート名 pickNum: 毎週の担当に必要な人数 slackWebhookUrl: Incoming Webhookの設定時にできるURL Slack Botの設定参照サイトのやり方を見てください。 通知されるメッセージ通知されるメッセージは以下の通りです。メッセージを編集する場合は、65行目の template を編集してください。 感想JavaScriptはほとんど書いたことがなかったので、PythonやJavaと対応する処理ができないかなと思いながら調べつつ書いていきました （なので非効率的な処理とかも多くあると思うので、あればぜひご指摘お願いします）。 また、GASがJavaScript 1.6ベースで作られているため、それ以降で実装されている機能が使えないのも割と不便だと感じました（例えばアロー関数）。 このSlack Botの作成を通して、普段自分がいかにPythonが色々な機能・ライブラリを使っているのかを痛感しました。 Pythonではパッとできるのになあという処理ができないことが多くて、それの実装を追加したのもいい勉強になったなと思います。 以上でこの記事を終わります。 【追記】詳解！ Google Apps Script完全入門 ～Google Apps &amp; G Suiteの最新プログラミングガイド～という本を買って読んでみました。 私のようなGASやJava Script初心者にとってはどちらについても初歩から理解することができたので良かったです。 GASに関してはあまりPythonとかに比べて記事も少ないので、辞書代わりに手元にあると便利です。 参照 Slack botを使って今週の掃除当番はどこだ問題を解決してみた！ Built-in Google Services","link":"/2020/01/27/role-assign-slack-bot/"},{"title":"iPad Pro × Magic KeyboardをタブレットPCとして活用するためのおすすめアプリ","text":"iPad Pro用Magic Keyboardが登場して本格的にiPad ProをタブレットPCとして運用していきたいと思い、個人的にPC化に必要だと思うアプリを調べて使ってみました。 それに併せてiPadだからこそ使って欲しいアプリについても紹介します。 構成としてはエンジニアの方が日常的に使っているであろうものに寄っていますが、これは一般的な使い方をする分には標準搭載のアプリ・機能で十分だと思っているからです。 以下におすすめのアプリとその用途について記載しますが、一部機能が被っているアプリもあります（Textastic, Coda）。 ですがそれはそれぞれの機能の使いやすさで振り分けてますので、どちらかでいいと言う人は片方だけでよいと思います。 目次 環境 おすすめアプリ Code Editor by Panic Textastic Code Editor 9 Margin Note 3 AnyFont PaperShip 終わりに 環境 iPad Pro (12.9インチ): split viewは必須なのでこちらのモデル推奨 iPad OS: 13.4.1 Apple Pencil おすすめアプリ Code Editor by Panic: SSHクライアント用 Textastic Code Editor 9: エディター用 Margin Note 3: PDFのアノテーション全般、ノートやMindmapの作成をはじめ、勉強に最適な機能多数 AnyFont: iPadにないフォントをインストールする用 PaperShip: 論文に書き込みをする用 Code Editor by Panic MacにあってiPadにないアプリの最たるものはターミナルだと思います。 iPad内で計算等をすることはないので、SSHクライアントとして使いえれば十分という基準でこのアプリを選びました。 他のアプリではなくこのアプリにした決め手は、 秘密鍵・公開鍵をアプリ内で作成できる（秘密鍵・公開鍵はローカルマシン毎に用意したい） Vimのキーバインドも正常に入力できる（意外とできないアプリが多いらしい） です。 どちらも後述のTextasticでは（さらっと確認した感じでは）できない機能だったので、わざわざ別のアプリを使うことにしました。 エディター機能もついてはいるのですが、 iCloudとの連携が使いづらい リモートサーバのファイルも一度ローカルに落とす必要がある ことからエディターとして使うことは諦めました。 iPadのローカルでもターミナルで操作したいって場合は、まだbeta版ですが iSHというアプリがあります。 そこまでしたいと思わなかったので使ったことないですが、気になる方はぜひ試してみてください。 Textastic Code Editor 9 エディターにはTextasticが使いやすい印象でした（この記事もこのアプリで書きました）。 Markdown形式に対応していてiCloud経由の書類を編集しやすければよいという基準で選びました。 iCloudのファイルもシームレスに編集できるので気に入っています。 今のところあったらいいなという機能としては、Vimのキーバインドに対応してくれると編集効率があがるので嬉しいなという感じです。 Margin Note 3 これは最近使いはじめたアプリなのですが、とにかくPDFのアノテーションがしやすい＆切り出してノート・Mindmapを作れるという非常にiPadと相性の良いアプリだと思います。 最近はネット上に非常に多くのPDF教材があがっていて、そのページ数は軽く数百ページあるものもザラにあります。 それをダウンロードしたはいいものの、プリントアウトするわけにもいかないし、かといってMac上で勉強するのも効率が悪いなと感じてました。 その悩みを一気に解決してくれたのがこのアプリでした。 できることをここで全て説明するのは大変なので、ぜひ公式HPにいってどんなことができるのか確認してみてください。 AnyFont Keynote等を使おうとした時、標準のテンプレートですらフォントが足りないということがざらにあります（おそらくMacに合わせて作成している）。 そこでフォントをインストールするために必要なアプリがこれです。 フォント毎にインストール作業をする必要があり、一括で複数のものができないのが不便だと感じましたが、そこまで多くのフォントをインストールするわけではないので許容範囲だと思います。 PaperShip これは以前の記事（【iPad Pro ×PaperShip】Mendeley管理のPDF論文に快適に書き込む方法）で紹介した論文PDFに書き込みをできるようにするアプリです。 詳細な内容等は上記の記事を読んでいただきたいのですが、こちらのアプリもiPadだからこそ使いたいアプリになりますのでぜひ使ってみてください。 終わりに 以上5つのiPadアプリについて紹介しました。 まだまだMacの代わりとして使うには物足りないなという感じですが、もう少ししたらGitHub上でVS Codeでコーディングができるようになりそうなので、プログラミング環境という意味ではだいぶ解消されると思います。 そして最近はGCPやAWS等でクラウド上でほとんどのことができるようになってきているので、iPadのネットワーク環境さえきちんと整えられればローカルで作業する必要もなくなるんだろうなと思います。 それでは。","link":"/2020/05/10/use-ipad-pro-like-mac/"},{"title":"MatplotlibとNetworkXを使った探索木の可視化","text":"探索アルゴリズムで何かしらの解を求めようとする際に、その探索過程を可視化することは探索アルゴリズムの理解に大きく貢献してくれます。 そこでMatplotlibとNetworkXを使って探索木の可視化をする方法を実装したので、備忘録の意味も込めてそれの紹介しようと思います。 環境・ライブラリ python: 3.6 matplotlib: 3.0.1 networkx: 2.4 pydot: 1.4.1 pygraphviz: 1.5 jupyter: 1.0.0 pythonの環境構築がまだの方は「Python環境構築(pyenv + pyenv-virtualenv)」参考にしてください。 探索木のサンプルデータ 「sample_search_tree.csv」をクリックしてダウンロードしてください。 1行に「あるノード,それに対応する親ノード」の識別子が記載してあります。 この二つの情報を保存するようにしておけば自分の探索木でも可視化することができます。 以下にファイルの中身の一部を記載しておきます。 sample_search_tree.csv0,12,13,2...100,99 探索木の可視化 可視化結果まずどんな感じで描画されるのか、先に実際の可視化した探索木を見せます。 サンプルコード※Jupyter notebookにて実行しています。 立ち上げたJupyter notebookと同じ階層に先ほどダウンロードしたsample_search_tree.csvを配置するようにしてください。 visualize_search_tree.ipynb1234567891011121314151617181920212223242526272829303132333435363738394041import csvimport matplotlib.pyplot as pltimport networkx as nxfrom networkx.drawing.nx_agraph import graphviz_layout# read the sample filewith open(\"sample_search_tree.csv\", 'r') as f: logs = [r for r in csv.reader(f)]# networkx settingsG = nx.DiGraph()for log in logs: # log=[self node, parent node] G.add_node(log[0]) G.add_edge(log[1], log[0])p = nx.drawing.nx_pydot.to_pydot(G)pos = graphviz_layout(G, prog=\"dot\")# matplotlib settingsfig = plt.figure(figsize=(10, 10), dpi=300)ax = fig.add_subplot(1, 1, 1)# draw the networknx.draw(G, ax=ax, pos=pos, with_labels=False, arrows=False, node_size=100, node_shape='o', width=0.5, node_color=range(len(logs)+1), cmap=\"jet\")# draw the color map barsm = plt.cm.ScalarMappable(cmap=\"jet_r\", norm=plt.Normalize(vmin=0, vmax=1))sm._A = []cbar = fig.colorbar(sm, shrink=0.4, ticks=[1, 0])cbar.ax.set_yticklabels(['start', 'end'], fontdict={'fontsize': 20})#fig.show() ちょっとだけ解説 普通にNetworkを描画しようとすると木構造にはならないので、G = nx.DiGraph()(有向グラフ)をベースにしてgraphviz_layoutで体裁を整えるようにしています。 そしてnx.draw()での出力の際に、ノードラベル・エッジの矢印があると見にくいので非表示にしています。 探索木の可視化では、どういう順番に探索されたかは重要な情報なため探索順に色が変化するようにnode_colorとcmapを設定しています。 今回の図では、青色（探索初期）〜赤色（探索終盤）となるように色付けをしています。 終わりに 簡単ではありますが、探索木の可視化をする方法について備忘録的にまとめてみました。 探索アルゴリズムについて勉強する際には、スクリプトからは再帰関数の挙動がいまいちわからないと思います。 そこで実際にどのような動きをしているのかを可視化することで、どのようにアルゴリズムが動いてるか・その挙動が期待しているものなのかをざっくりと確認することができるようになります。 この可視化スクリプトが探索アルゴリズムを使っている人の少しでも助けになれば幸いです。 それでは。 参照 networkx.drawing.nx_pylab.draw_networkx Node Colormap How to add a simple “colorbar” to a network-graph plot in python?","link":"/2020/05/29/search-tree-visualization-using-networkx/"},{"title":"ケモインフォマティクス(Cheminformatics)を勉強する際に役立つ書籍・オンライン教材・ツール・ブログ紹介","text":"ケモインフォマティクスの研究をやろうとした際、恐らく初めに悩むのは勉強するための教材が少ないことだと思います。 ここ最近でいくつか書籍やオンラインチュートリアルなどが出てきてはいますが、それらの情報源に書学者が辿り着くにはなかなか厳しいかと思います。 そこでこの記事では、初学者がスムーズに勉強できるように分野界隈ではよく知られているであろう書籍・教材・ツール・ブログをまとめようと思います。 ※ここに全てを載せることはできないので、これが入ってないのはおかしいだろ！というものがありましたらご指摘いただけたらと思います。 一覧を見たい方 書籍 ケモインフォマティックス―予測と設計のための化学情報学 Tutorials in Chemoinformatics 化学のための Pythonによるデータ解析・機械学習入門 オンライン教材 py4chemoinformatics TeachOpenCADD ツール RDKit ChemAxon DeepChem Chainer Chemistry kGCN ブログ Practical Cheminformatics CHEMINFOGRAPHIC データ化学工学研究室(金子研究室)＠明治大学 IS LIFE WORTH LIVING? Cheminformatics 2.0 おまけ Awesome Cheminformatics 終わりに 書籍 ケモインフォマティックス―予測と設計のための化学情報学今となっては情報としても古くなってしまいましたが、「ケモインフォマティックス― 予測と設計のための化学情報学」は東大の船津先生が翻訳された当時のケモインフォマティクスが網羅的に解説されている書籍。 ケモインフォをやっている方の多くはこの書籍を読まれたのではないでしょうか。 （日本語で）歴史的な流れも含めて体系的に勉強できるほぼ唯一のソースではないでしょうか。 現在は絶版となっておりかなり高額になっているため、図書館等で借りて読むのが良いかと思います。 Tutorials in Chemoinformatics「Tutorials in Chemoinformatics」は比較的最近出てきたケムインフォに関する書籍です。 洋書のため初学者にとっては少し厳しいかもしれないが、スクリプトやツールの使用画面等が豊富に盛り込まれているため、そっちのスキルがある場合はすんなりと勉強できるかもしれないです。 様々なタスクを紹介しており、タイトル通りチュートリアルとしては十分役に立つかと思います。 ただ唯一不満があるとしたら、Kindle版は非常に見にくくなっているため、書籍版で購入することをお勧めします。 化学のための Pythonによるデータ解析・機械学習入門「化学のための Pythonによるデータ解析・機械学習入門」明治大の金子先生が書かれている化合物×機械学習・データ解析がメインの書籍。 大部分はタイトル通りデータ解析・機械学習メインであり、題材が化合物を使ったものになっている感じです。 ケムインフォを勉強しようと思って購入するとちょっとズレているかもしれないが、とても丁寧に解説されているので上記のことを勉強したかったらお勧めします。 オンライン教材 py4chemoinformatics「py4chemoinformatics」はMishima.sykが作成した、日本語で学べる数少ないケモインフォに関するオンライン教材。 こちらはドキュメントが充実しており、一部はJupyter Notebookも提供されている。 現在も適度に更新されており、最新のケモインフォについて勉強したかったらこれをフォローしておくと良いと思います。 TeachOpenCADD「TeachOpenCADD」はコンピュータ支援創薬（CADD）を学ぶことのできるJupyter Notebookベースのオンラインチュートリアルです。 Jupyter NotebookだけでなくKNIMEでも利用することができ、どちらも国際雑誌に掲載されています。 TeachOpenCADD: a teaching platform for computer-aided drug design using open source packages and data TeachOpenCADD-KNIME: A Teaching Platform for Computer-Aided Drug Design Using KNIME Workflows どちらもコードやワークフローだけでなく、文章もきちんと記載されておりCADDの流れを一通り勉強したい人には最適かと思います。 ライセンスもCC BY 4.0となっており、企業の方でも利用しやすいのも良いと思います。 ツール RDKitPyhtonでケムインフォをやる場合は必須と言っていいほどのツールではないでしょうか。 多くの研究はRDKitを使用して行われており、現在も精力的に開発がされています。 チュートリアルは充実はしているが、全機能については書かれいないため使い方を調べるときに苦労することがしばしば。 ドキュメントも丁寧に書かれているわけではないので、本格的に使いこなすには自力で使い方を調べられるスキルは必須だと思います。 ChemAxonChemAxonはケモ・バイオインフォに関する様々なアプリケーションを提供している。 有償にはなるがアカデミックフリーであり、有償ならでは痒いところに手が届く機能が豊富にある。 アプリケーションだけでなくJava/.NET APIも提供しており、研究用途にも利用しやすい。 ただし、APIのドキュメントは十分整備されているとは言えず、試行錯誤することも多々あるかと思います。 DeepChemDeepChemはオープンソースの創薬・材料科学・量子化学・生物学向けのツール群。 深層学習を含め多種多様なことができる一方、最近はいろいろなことができすぎるため扱いが難しくなってきている印象。 ただ最近のケムインフォツールとしては間違いなく代表的格だと思います。 Chainer ChemistryChainer ChemistryはChainerベースのケムインフォ向けの深層学習フレームワーク。 Chainerをメインで使用している人にとっては使い勝手の良いフレームワークではあったが、Chainerの開発が終わってしまったためこれ以上はメンテナンスはされないのが残念です。 kGCNkGCNは化合物をグラフとして扱う手法に特化した深層学習フレームワーク（私も開発に関わっています）。 Command Line Interface、KNIME、Jupyter Notebookと様々なインターフェースに対応しており、様々なユーザーに対応できるようにしています。 ブログ Practical CheminformaticsCHEMINFOGRAPHICデータ化学工学研究室(金子研究室)＠明治大学IS LIFE WORTH LIVING?Cheminformatics 2.0おまけ Awesome Cheminformaticsケモインフォマティクスに関する情報をかなり網羅的にまとめてあるレポジトリ。 なにか自分がやりたいことができるツールなどを調べたいときに役立つと思います。 終わりに 以上、ざっと私が把握している中で主要なものをまとめさせてもらいました。 ここで紹介したもの以外にももちろん多様なものが世の中にはありますが、まずはここにあげたものを勉強しておけばケムインフォについてある程度把握することはできるのではないでしょうか。 この情報が何かの役に立つことを祈ります。","link":"/2020/04/11/recommend-cheminfo-books-and-tutorials/"},{"title":"量子化学計算を独学で勉強する際におすすめの本・ウェブサイト","text":"量子化学計算をやってみたいけど敷居の高さを感じて諦めてしまったことはありませんか？ 確かに量子化学に関する教科書・書籍はどれも難しそうで、かつ軽い気持ちでやってみることができない専門性の高い領域でした。 ですが最近になってきて初心者でも量子化学計算を実施できるよう易しく解説してくれている書籍や解説ウェブサイトが充実してきており、以前に比べてかなり始めやすくなっています。 そこでこの記事では、私が量子化学計算(理論を除く)を独学する際に参考にしていた書籍・ウェブサイトや最近出てきたものまで紹介しようと思います。 目次 書籍 新版 すぐできる 量子化学計算ビギナーズマニュアル ゼロからわかる!! 独習 量子化学計算: 理論からはじめない新しい量子化学計算の本 ウェブサイト HPC Systems PC CHEM BASICS.COM 計算化学.com YouTube Gaussian Inc. Japanese 終わりに 書籍 新版 すぐできる 量子化学計算ビギナーズマニュアル 「新版 すぐできる 量子化学計算ビギナーズマニュアル」はQ＆A形式でやりたい計算を逆引きできる書籍です。 理論的背景もきちんと説明しながら入力ファイルの作成や出力ファイルの見方まで丁寧に解説してある素晴らしい本です。 Gaussian03がメインですが、巻末の方にGAMESSについても簡単な使い方が書いてあります。 実際に実験をしている人で、やりたい計算が明確な人はこの書籍を買って該当する箇所だけしっかり読み込んで理解するということができるので大変便利です。 ですが実際の計算をする場合はGaussian・GAMESSの使い方はこの書籍とは別で勉強しないとおそらくわからないと思いますので、すぐに実践できないかもしれません。 知り合いに計算機の使い方がわかる人がいたらその人に相談しながらやるとスムーズに進められるかと思います。 あと使っているのがGaussian03と古いバージョンのため、最新バージョンであるGaussian16では記載されている方法では動かない可能性もあるので注意が必要です。 また、Gaussian自体は有償ソフトウェアになるため気軽に使える環境にいないと実践することが難しいです。 それでも、理論背景等は簡潔にまとめられておりとても参考になるため、手元に置いておいて損はないと思います。 ゼロからわかる!! 独習 量子化学計算: 理論からはじめない新しい量子化学計算の本 「ゼロからわかる!! 独習 量子化学計算: 理論からはじめない新しい量子化学計算の本」は後述のウェブサイト（PC CHEM BASICS.COM）の管理者様が書かれた本です。 先ほどの書籍とは違い、無料で使えるGAMESS(US)やFireflyを使っているため、誰でも気軽に量子化学計算を体験できます。 さらにWindowsやMacどちらにも対応してくれているため、スパコンや専用の計算機がない人でも問題ありません。 理論的背景の部分については最低限の説明で済ませており、とにかく初学者がつまづかないようアプリケーションの図を逐一載せながら丁寧に解説してくれています。 実践的なスキルを身につけるには少し心許ないですが、計算機や量子化学計算のことなんもわからないけどとにかく試してみたいって人にはおすすめの書籍です。 こちらは2020年に発売されており、ほぼ最新の状態で勉強することができるため比較的良くわからないエラーで読み進められないということも起きにくいかと思います。 問題があるとすれば、書籍版がなくKindle版でのみの販売なため注意してください。 ウェブサイト HPC SystemsHPC Systemsは企業やアカデミアに計算機・計算アプリケーション等を導入している企業さんです。 計算系の研究室であればお世話になっている人も多いのではないでしょうか。 GaussianをはじめReaction plus、NW Chem、Winmostarなど様々なアプリケーションを取り扱っています。 それぞれのProductのページに行けば情報をまとめてくれています。 特にGaussianについては情報量も多く、日本語でまとめてくださっているので公式ドキュメントを読むのがしんどいという人には重宝するサイトだと思います。 PC CHEM BASICS.COMPC CHEM BASICS.COMは上の「ゼロからわかる!! 独習 量子化学計算: 理論からはじめない新しい量子化学計算の本」の著者が運営されているサイトです。 こちらのサイトは書籍のコンセプトと同様、初心者に易しく無料で量子化学計算を体験するための記事が豊富にあります。 気軽に量子化学計算を体験することに重点を置いてくれているため記事の一つ一つが大変わかりやすいです。 計算化学.com計算化学.comは量子化学計算メインではありますが、計算化学全般に関する記事が豊富にあります。 量子化学計算のことで気になることがあったらまずこのサイトで検索してみると欲しい情報が得られる可能性が高いと思います。 計算化学に関するニュースなども定期的に取り上げていたり、最近では機械学習・深層学習系のトピックも取り上げてくれているように感じます。 実践的な計算をする上では大変お世話になるサイトの一つかと思います。 YouTube Gaussian Inc. JapaneseGaussian Inc. Japaneseはつい最近開設されたYouTubeチャンネルになります。 まだ私もきちんとは観ていないのであまりコメントはできないですが、Gaussian公式かつ日本語で解説動画が観れるのは大変貴重だと思います。 フォローしておいて損はないと思います。 終わりに 以上、私が独学で量子化学計算を勉強した際に参考にしている書籍をまとめました。 私自身が量子化学計算を専門で研究しているわけではないので、深いところまで理解できているわけではないですが、紹介したものを一通り勉強しておくとそれなりに計算をする上では最低限のスキルは身につくのかなと思います。 理論に特化して勉強する書籍は今回省いてしまいましたが、要望があれば追記します。 また何か追記できるようなものが出てきた際には追記しようと思います。 それでは。","link":"/2020/05/17/recommend-qc-books-and-tutorials/"},{"title":"非情報系の学生がゼロから機械学習系の研究をするために勉強した書籍紹介（プログラミング編）","text":"今回は前回の記事の続きで、私がプログラミングの勉強に使った書籍の紹介です。 どの言語でも構いませんが、最初に一般的なプログラミングの概念や文法を理解できるような書籍を選ぶと良いです。 そうすれば他言語の勉強をするときがグッと楽になると思います（公式ドキュメントやネットの記事で理解できるようになる）。 今回紹介する書籍の位置づけ。 PC・サーバ・インフラ プログラミング関連（今回の記事） 人工知能関連 最初に簡潔に僕の意見を書いておきます。 プログラミング言語とは（人が理解できるレベルで）コンピュータに指示をするために作られた言語です。 ですが自分で書いたプログラムは（少なくとも最初のうちは）ほとんどの場合、指導教員に見せて想定した動作をするか確認してもらうことになると思います。 なんでこんな話をしたかと言うと、書いたプログラムは機械に正しく指示を出せればなんでも良いというわけではなく、 他人が読んでも理解できるように書く必要がある ということです。 汚いプログラムの代表例を出すとしたら、 変数の役割がわかるよう変数名をつけていない（a, hogeなど） その言語のコーディング規則に従っていない などです。 汚いプログラムは正常に動作してるかも不明瞭になりがちで、他人に引き継ぐことも実質不可能に近いです。 なので初学者はとにかく最初は「他人が読んでも理解できる・1週間後の自分が読んで理解できる」ようにプログラムを書くことを意識するのが良いと思います。 前置きが長くなりましたが、これ以降で僕が勉強したプログラミングの書籍を紹介していきます。 目次 Python スッキリわかるPython入門 (スッキリシリーズ) 退屈なことはPythonにやらせよう ―ノンプログラマーにもできる自動化処理プログラミング Fluent Python ―Pythonicな思考とコーディング手法 エキスパートPythonプログラミング改訂2版 Java スッキリわかるJava入門 第3版 (スッキリシリーズ) スッキリわかる Java入門 実践編 第2版 (スッキリシリーズ) Effective Java 第3版 Shell Script 新しいLinuxの教科書 新しいシェルプログラミングの教科書 R RStudioではじめるRプログラミング入門 プログラミング言語全般に関係するもの リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice) プリンシプル オブ プログラミング3年目までに身につけたい一生役立つ101の原理原則 終わりに Pythonエディターはなんでも良いと思いますが、初学者はJupyter notebookを使うのがインタラクティブに操作できて良いかなと思います。 慣れてきたらVisual Studio CodeやPyCharmなどを使って書いていくのも良いと思います。 スッキリわかるPython入門 (スッキリシリーズ)「スッキリわかるPython入門 (スッキリシリーズ)」を含め、個人的にこのスッキリわかるシリーズが最初の導入の入門書として気に入っています。 後述のJavaもこのシリーズで勉強しました。 図解もわかりやすく、「なぜ」こうするのかという理由まで解説があるので初学者にはちょうど良いと思います。 退屈なことはPythonにやらせよう ―ノンプログラマーにもできる自動化処理プログラミング「退屈なことはPythonにやらせよう ― ノンプログラマーにもできる自動化処理プログラミング」は大体pythonは理解できたけど、具体的に色々なことに使ってみたいって人にお勧めです。 綺麗なコードではありませんが、パソコンを使った作業の効率化・自動化をする例が豊富にあるので、実践的なプログラミングをして学習していきたい人向けです。 気になった人は目次を見てどんなことが書かれてるのか一度チェックしてみてください。 Fluent Python ―Pythonicな思考とコーディング手法「Fluent Python ― Pythonicな思考とコーディング手法」は普通にPythonのコードが書けるようになってきて、さらにPythonのスクリプトを美しく書きたいって人にお勧めです。 ただページ数がかなり多いので、気になった章をつまみ読みするスタイルが良いかもしれないです。 エキスパートPythonプログラミング改訂2版「エキスパートPythonプログラミング改訂2版」はタイトルの通り、発展的な内容が書かれた書籍です。 普通のコーディングには飽きてきて、ベストプラクティスを求めたくなった人はぜひ一度読んでみてください。 ここら辺まで実践できるようになってくると、普通のエンジニアクラスにはなっていると思います。 JavaJavaはIntelliJやEclipseなどのIDEを使ってプログラミングをすることを強くお勧めします。 じゃないと書くのが（少なくとも僕は）非常に辛いです。。 スッキリわかるJava入門 第3版 (スッキリシリーズ)「スッキリわかるJava入門 第3版 (スッキリシリーズ)」はPythonでも出てきましたスッキリわかるシリーズです。 Javaはこの本と後述の同シリーズ実践編を理解すれば、通常のプログラミングをする分には困らないと思います。 スッキリわかる Java入門 実践編 第2版 (スッキリシリーズ)「スッキリわかる Java入門 実践編 第2版 (スッキリシリーズ)」は入門と書いてありますが、タイトル通り内容は結構実践的な物も結構多く勉強になります。 Effective Java 第3版「Effective Java 第3版」はある程度Javaを書くようになって、効率的なソースコードを書く必要が出てき際に読むと良いと思います。 内容は結構Deepなものが多いので買う前に自分が必要としているレベルなのかは確認することをお勧めします。 Shell Script新しいLinuxの教科書「新しいLinuxの教科書」はLinuxの教科書ではありますが、シェルスクリプトを使いこなすためにはLinuxのコマンドを幅広く把握していることが大切なので、ここで紹介します。 初学者はCUIに慣れておらず、シェルの使い方そのものもわからないケースがほとんどだと思うのでこれをまず勉強すると後々が楽になるかと思います。 CUIも臆せず使いたいって人はぜひ買ってみてください。 新しいシェルプログラミングの教科書「新しいシェルプログラミングの教科書」を読めば大体シェルスクリプトでどんなことができるかを知ることができるようになると思います。 正直Linuxのコマンドは奥が深いものが多くフォローするのはかなりしんどいので、必要に応じてそのコマンドについて勉強するとシェルスクリプトでやれることの幅が広がっていくと思います。 RRStudioではじめるRプログラミング入門Rに関しては、プログラミング言語としてのRを学ぶという書籍はあまり多くなく、統計学・データサイエンスを通してRを学ぼう、みたいな本がほとんどです。 「RStudioではじめるRプログラミング入門」はR自体を学べる貴重な本ですが、Rが初めて学ぶプログラミング言語ですって人にはちょっとしんどいかもです。 なのでRを学ぶ前に他の言語でプログラミング言語とはというところをある程度理解してからの方が良いかなと思います。 自分はRは基本的には都度やりたいことを調べて書いていくってスタイルです。 プログラミング言語全般に関係するもの以下の二つの書籍「リーダブルコード ― より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)」、「プリンシプル オブ プログラミング3年目までに身につけたい一生役立つ101の原理原則」はプログラミングがある程度できるようになってから読むのをお勧めします（最初に読んでしまうと意味不明だと思う）。 色々と書かれてますが、「万人が読めるコードを書くため」に必要な概念についてまとめられていると思って読むと理解しやすいかと思います。 リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice) プリンシプル オブ プログラミング3年目までに身につけたい一生役立つ101の原理原則 終わりに以上、自分が読んできた書籍の中でお勧めのものを紹介しました。 まず初めは書籍でプログラミングの基礎を勉強し、ある程度身についたらネットで調べながら勉強していくスタイルに変えていくと良いと思います。 公式ドキュメント、Stack OverflowやQiita、その他技術系ブログなどネットには素晴らしいサイト・記事が大量にあります。 それらの内容の良し悪しを判断できるようになったら、1人で十分プログラミングができるようになると思います。 そして最後に、とにかく1週間後の自分が読んでも理解できるようなプログラムを書くように日々意識してみてください。","link":"/2020/04/27/recommend-books-programming/"},{"title":"非情報系の学生がゼロから機械学習系の研究をするために勉強した書籍紹介（PC・サーバ・インフラ編）","text":"ここ数年、深層学習ブームでこれ関連の研究や製品が多く世の中に広まってきており、この機会に勉強・研究を始めたという人も多くいると思います。 私自身もその1人で、薬学部から情報系の知識0でこの分野に入り最初は何もわからずとても苦労しました。 現在は世間一般の情報学部と同じくらいの知識は身についたと思っていますが、それに至るまでに勉強した書籍をまとめることにしました。 紹介する書籍はいくつかの記事に分ける予定で、 PC・サーバ・インフラ（今回の記事） プログラミング関連 人工知能関連 の予定です。 これらの書籍を勉強し、専門分野についての知識を身につけることができれば、0ベースの状態から、まっさらな計算サーバを渡されれば一通り環境をセットアップ・管理をし、研究を遂行することができるまでにはなれるかと思います。 以下に書籍を初心者目線で読んだ方が良い順にコメント付きで列挙していきます。※僕はMacユーザーのため、一部Macユーザーしか意味のない書籍もありますがご了承ください。ほとんどの書籍はLinuxについてのものなので問題ないかと思います。 目次 これから学ぶmacOSターミナル おうちで学べるシリーズ 絵本シリーズ 実践Vim 新しいLinuxの教科書 シス管系女子シリーズ 標準テキスト CentOS 7 構築・運用・管理パーフェクトガイド わかばちゃんと学ぶGit使い方入門 プログラマのためのDocker教科書 達人に学ぶDB設計徹底指南書 コンピューター＆テクノロジー解体新書 終わりに これから学ぶmacOSターミナルまず初めに勉強したのは、Macでのターミナルの使い方でした。 「これから学ぶmacOSターミナル」を一通り読んで適度に試していくと、ある程度ターミナルでできることなどを理解することができ、LinuxでのCUI操作にもすぐ慣れることができると思います。 おうちで学べるシリーズ以下にはインフラ周りに該当するものだけを記載しますが、「おうちで学べるシリーズ」はどれも初心者であっても読みやすく、良いと思いました。 実際に手を動かしてやれるように例が豊富にあり、理解しながら読み進めることができるかと思います。 絵本シリーズおうちで学べるシリーズよりもまずは抽象的に勉強したい場合は、この「絵本シリーズ」が良いと思います。 タイトルの通り（文字の多い）絵本で書かれているので、まずイメージから入りたいって人はこのシリーズの本はおすすめです。 実践VimCUIでテキストを編集する際にまず課題になるのが、Vim / Emacsのどちらかを使わないとできないことだと思います。 最低限はvimtutorコマンドでチュートリアルを実施するだけでも十分だと思いますが、それだけだとVimの良さに気づくことはできないと思います。 Vimを使いこなしたいと思ったら「実践Vim」をぱらっと読んでみるといいきっかけになるかもしれません。 新しいLinuxの教科書実際にLinux（UbuntuやCentOS）で研究を進めていくことになると、そもそもどう操作していいかわからず不安になると思います。 そこで「新しいLinuxの教科書」でざっとした雰囲気と使い方を勉強しておくと、研究の本質ではないところでいちいち不安にならずに作業できるようになると思います。 シス管系女子シリーズより実践的な用途になりますが、個人的にはサーバ管理をする上では「シス管系女子シリーズ」はイチ押しの書籍（漫画）です。 おうちで学べるシリーズを読んだ上で、この漫画を読むとインフラ周りの理解度がグッと上がると思います。 最初は僕らと同じレベルだったミントちゃん（主人公）が、読み進めていくうちにどんどん理解度で離されいってしまうのが最初は悲しかったです。 キャラクターが萌え系なので簡単そうに見えますが、内容は結構ガチです。 標準テキスト CentOS 7 構築・運用・管理パーフェクトガイド現在はすでにCentOS8が出てしまっていますが、まだCentOS7で運用されているサーバも多いと思いますので、「標準テキスト CentOS 7 構築・運用・管理パーフェクトガイド」を勉強するのは無駄にはならないはずです。 正直量が多すぎて全部は読めてませんが、ほぼやりたいこと全て書かれているものになるので、辞書的な使い方ができると思います。 Ubuntuと違う部分も多くありますが、ベースの部分は同じなので「CentOSでのこの作業をUbuntuで」みたいな検索ですぐ対応するものが引っ掛けられます。 わかばちゃんと学ぶGit使い方入門内容的には初心者向けなのですが、そもそもGitを使う状況というのはかなり後だと思ったので後ろの方に持ってきました。 「わかばちゃんと学ぶGit使い方入門」Gitで最低限必要であろう操作や仕組みについて勉強できます。 プログラマのためのDocker教科書研究をしていくうちに、Dockerを使った方が便利な時や必要になるケースが出てくると思います。 「プログラマのためのDocker教科書」を読んでおけば最低限のDockerの知識は身につくと思います。 達人に学ぶDB設計徹底指南書データベースに関してはまだ初心者に毛が生えた程度なのですが、どういう風にあるべきかなどを勉強するために買いました。 ただ「達人に学ぶDB設計徹底指南書」は片手間で勉強するにはとても奥が深く難しいので、ガッツリやりたいという人以外にはあまりお勧めできないですね。。 コンピューター＆テクノロジー解体新書これはタイトルの通り、「コンピューター＆テクノロジー解体新書」はコンピュータが関連するものほぼ全ての仕組みを図解してくれている書籍です。 馴染みのあるスマホの仕組みからよくわからないインターネットの回線等、幅広いものに関して取り扱っています。 個人的にはすごい好きな本で、定期的にパラパラと読んでる感じです。 終わりに以上、書籍としてPC・サーバ・インフラについて勉強したものを紹介しました。 この辺りを理解すれば、あとはGoogle先生に聞いて必要な情報を取捨選択できるようになると思います（重要）。 このご時世、書籍よりもGoogle先生に聞いたほうがはるかに多くの情報が得られますし、何より早く、効率的です（そして教員はそう言う）。 ですがそれができるのは一定以上の知識がある人（教員・研究員）であり、全くの初心者は書籍から入り正しい情報が何なのかを理解し、判断できるようにするのが最初だと思います。 そして研究の本質ではない部分ではありますが、研究ツールを使いこなすためにはある程度自分で勉強するのが必須だと思います。","link":"/2020/04/10/recommend-books-infrastructure/"}],"tags":[{"name":"python","slug":"python","link":"/tags/python/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Matplotlib","slug":"Matplotlib","link":"/tags/Matplotlib/"},{"name":"iPad","slug":"iPad","link":"/tags/iPad/"},{"name":"cheminformatics","slug":"cheminformatics","link":"/tags/cheminformatics/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"},{"name":"ownCloud","slug":"ownCloud","link":"/tags/ownCloud/"},{"name":"book_scanning","slug":"book-scanning","link":"/tags/book-scanning/"},{"name":"chemaxon","slug":"chemaxon","link":"/tags/chemaxon/"},{"name":"homebrew","slug":"homebrew","link":"/tags/homebrew/"},{"name":"LaTeX","slug":"LaTeX","link":"/tags/LaTeX/"},{"name":"Word","slug":"Word","link":"/tags/Word/"},{"name":"Overleaf","slug":"Overleaf","link":"/tags/Overleaf/"},{"name":"Magic_Keyboard","slug":"Magic-Keyboard","link":"/tags/Magic-Keyboard/"},{"name":"PaperShip","slug":"PaperShip","link":"/tags/PaperShip/"},{"name":"Mendeley","slug":"Mendeley","link":"/tags/Mendeley/"},{"name":"setup","slug":"setup","link":"/tags/setup/"},{"name":"rdkit","slug":"rdkit","link":"/tags/rdkit/"},{"name":"jupyter_notebook","slug":"jupyter-notebook","link":"/tags/jupyter-notebook/"},{"name":"Google_Apps_Script","slug":"Google-Apps-Script","link":"/tags/Google-Apps-Script/"},{"name":"Slack","slug":"Slack","link":"/tags/Slack/"},{"name":"NetworkX","slug":"NetworkX","link":"/tags/NetworkX/"},{"name":"Search Tree","slug":"Search-Tree","link":"/tags/Search-Tree/"},{"name":"TeachOpenCADD","slug":"TeachOpenCADD","link":"/tags/TeachOpenCADD/"},{"name":"drug discovery","slug":"drug-discovery","link":"/tags/drug-discovery/"},{"name":"machine learning","slug":"machine-learning","link":"/tags/machine-learning/"},{"name":"Books","slug":"Books","link":"/tags/Books/"},{"name":"gamess","slug":"gamess","link":"/tags/gamess/"},{"name":"gaussian","slug":"gaussian","link":"/tags/gaussian/"},{"name":"quantum chemistry","slug":"quantum-chemistry","link":"/tags/quantum-chemistry/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"shell script","slug":"shell-script","link":"/tags/shell-script/"}],"categories":[{"name":"lifehack","slug":"lifehack","link":"/categories/lifehack/"},{"name":"programming","slug":"programming","link":"/categories/programming/"},{"name":"Apple","slug":"Apple","link":"/categories/Apple/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"cheminformatics","slug":"cheminformatics","link":"/categories/cheminformatics/"},{"name":"macOS","slug":"macOS","link":"/categories/macOS/"},{"name":"computational chemistry","slug":"computational-chemistry","link":"/categories/computational-chemistry/"},{"name":"Books","slug":"Books","link":"/categories/Books/"}]}