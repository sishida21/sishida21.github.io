{"pages":[{"title":"","text":"Shoichi Ishida4-Year Ph.D. ProgramSynthetic Medicinal Chemistry, Graduate School of Pharmaceutical Science, Kyoto UniversityResearch Interests Computer-aided synthesys planning Application of machine learning for life sciences Papers S. Ishida, K. Terayama, R. Kojima, K. Takasu, Y. Okuno, “Prediction and Interpretable Visualization of Retrosynthetic Reactions Using Graph Convolutional Networks”, Journal of Chemical Information and Modeling, 2019. [DOI: 10.1021/acs.jcim.9b00538] International Conference and Workshop R. Kojima, H. Iwata, S. Ishida, M. Ikeguchi, Y. Okuno, “A Prediction Framework for Drug Discovery Using Graph Convolutional Networks”, 5th International Symposium for Medicinal Sciences (ISMS) (poster), Mar., 2019. Domestic Conference and Workshop 石田祥一, 寺山慧, 小島諒介, 高須清誠, 奥野恭史, “Interpretable Reaction Prediction using Graph Convolutional Networks”, CBI学会2019年大会, 2019/10/22~24, (oral) 石田祥一, 寺山慧, 小島諒介, 高須清誠, 奥野恭史, “GCN 記述子とモンテカルロ木探索を用いた合成経路予測”, CBI学会2019年大会, 2019/10/22~24, (oral: sponsored session) 池口茉莉恵, 石田祥一, 小島諒介, 岩田浩明, 奥野恭史, “Prediction of Compound-Protein Interactions and Visualization Based on Graph Convolutional Networks”, CBI学会2019年大会, 2019/10/22~24, (poster) 渋川亮祐, 石田祥一, 寺山慧, 美添一樹, 奥野恭史, 津田宏治, “証明数探索を用いた化合物合成経路列挙アルゴリズム”, 第21回情報論的学習理論ワークショップ, 2018/11. (oral: 学生優秀プレゼンテーション賞 ファイナリスト) Review article 寺山慧, 石田祥一, 奥野恭史, “AIによる逆合成解析に向けて”, 月刊「細胞」, Vol.51, No.7, pp.12-15, 2019/5. 寺山慧, 石田祥一, 奥野恭史, “囲碁AIから逆合成解析へ−情報科学からのアプローチ”, 化学, Vol.74 No.2, pp.36-40, 2019/1.","link":"/about/index.html"}],"posts":[{"title":"本の自炊（PDF化）〜管理方法(iPhone, iPadユーザー向け)","text":"私はいつも年末年始に一年間で購入した書籍をPDF化（自炊）して処分・整理しています（Kindleで売られていない書籍はまだまだ多いです）。そこでこの記事では私が書籍の自炊をする際に使用している道具・アプリの紹介と手順をまとめていきます。 使用道具・アプリケーション ScanSnap iX500 DURODEX 自炊裁断機 ブラック 200DX iCloud(ストレージプラン50GB) Booklover 自炊手順 裁断機で書籍の背の部分を切り落とす 分厚い書籍は一度カッターで分割してから カバーも別で表・裏表紙をカッターで切り分ける（PDFの先頭がサムネイルに使う） ScanSnapで読み込みPDF化 スキャン前にきちんと裁断されているか確認する 1枚目は表表紙をスキャンするようにする ページ数にもよるが大体1冊5~10分くらい(25枚/分) iCloudのBookloverのフォルダに追加する ファイル名でメタデータの管理をする ファイル名からのメタデータ抽出→ジャンル→「抽出条件」を「1番目の()内」に変更しておく [著者名]_(ジャンル名)_書籍名.pdfで保存 各デバイスでメタデータの抽出 ファイル名からのメタデータ抽出→「すべての本のファイル名からメタデータを抽出」を実行 おわりに以上が一連の流れになります。本の自炊はかなり体力を使うので、裁断等は外注してしまうのもありだと思います。私は今までの教科書等も全て自炊してしまい処分しています。自炊してよかったなと思うところは、 教科書・専門書等普段は重くて持ち歩けないものもスマホ・タブレットでサッと確認できる OCRも使えば検索ができるようになる 引越しのたびに本を移動させる手間がなくなったあたりです。 もし興味があるけど購入するのはちょっとなあという人は、DMMで自炊キットのレンタルなどもありますので、そちらを利用してみるのもアリだと思います（私は利用したことないので評価はできないですが。。） 以上で、私の書籍の自炊方法・管理の紹介を終わります。","link":"/2020/01/02/book-to-pdf/"},{"title":"はじめに","text":"ケムインフォを中心に創薬関連の研究している学生です。このブログには備忘録的に以下に関連するトピックを不定期にまとめていくつもりです。 Chemoinformatics Machine Learning Programming Medicine etc. 私についてはこちらを参照ください。","link":"/2019/12/09/intro/"},{"title":"rdMolDraw2Dを用いて単色の分子を描画する","text":"本記事では、RDKitを使って原子が色分けされていない単色の分子を描画する方法について記載します。いろいろな記事で分子の描画方法については記載があったのですが、原子の色を調整する方法は載っていなかった&amp;やり方にたどり着くまで試行錯誤が必要だったのでまとめることにしました。処理としては1行で済むので簡単です。 rdMolDraw2Dを使った基本的な分子の描画方法については、こちらのブログに丁寧にまとめられていますのでそちらを参照ください。 環境・ライブラリ python: 3.6 rdkit: 2019.09.2 ipython: 7.1.1 スクリプト以下のスクリプトを実行すると黒色単色で分子を描画することができます。 このスクリプトの出力ファイルの中身は以下の通りです。 解説分子の色を調整しているのは12行目の drawer.drawOptions().updateAtomPalette({k: (0, 0, 0) for k in DrawingOptions.elemDict.keys()}) になります。 DrawingOptions.elemDict.keys() で分子中の各原子のkeyを取得 取得したkeyに (0, 0, 0) を割り当てる。（これはRGB表記の黒を意味しています） 作成したdictを drawer.drawOptions().updateAtomPalette() を使ってatom paletteの更新以上の処理で分子の色を調整しています。RGB表記の値を変えれば望みの色に分子を統一することが可能です。 12行目をコメントアウトすると、以下の通りヘテロ原子に色がついた分子の描画ができます。 他にも色々とdrawerのオプションは調整できますが、それはRDkitのAPIドキュメントを参照してください。 以上で終わります。 参照RDKitでの構造式描画を詳しく解説rdkit.Chem.Draw.rdMolDraw2D module","link":"/2020/01/07/rdkit-draw-mol/"},{"title":"LaTeXからWordに変換する方法(Mac)","text":"Overleafで論文のやり取りをする際、有料版でないとコメント機能が使えないです。そのためlatexからwordファイルに変換したいと思い調べました。いくつかの方法（latex2rtf, pandoc, GrindEQ）がよくヒットしますが、一番シンプルかつ他にも汎用性のあると感じた方法を以下に記載します。 ※参照のサイトではMacではできずWindowsのみで今回の方法が機能したと記載されてますが、Macでもできたのでまとめました。 環境 macOS Catalina: 10.15.1 Microsoft Word for Mac: 16.32 Overleaf 方法 Overleafに対象のlatexをアップロードし、PDFでダウンロードする。 そのPDFをWordで開く。 以上で終わりです。（WordでPDFが開けるということを知っている人からすれば当たり前な方法ですかね。。） 終わりにさすがにFigureとかは崩れてしまうので完璧とまでは言えないですが、コメントのやり取り程度の用途でしたら十分です。 参照 In a Word: LaTeX to Word and vice versa Exporting your work from Overleaf pandoc GrindEQ latex2rtf","link":"/2019/12/15/latex-to-word/"},{"title":"Python環境構築(pyenv + pyenv-virtualenv)","text":"普段私はpyenv + pyenv-virtualenvの組み合わせでpythonの環境管理をしています。今回の記事ではその設定方法について記載していきます。記事中で登場するファイルをダウンロードすればそのまま使用できます。 動作確認はLinux, MaxOSでしてます。 Install pyenv and pyenv-virtualenv下記のスクリプトをダウンロードして、 ターミナルを起動してダウンロードした場所に移動した後に、下記のコマンドを実行して下さい。 1bash install_pyenv.sh インストールが終わったら一度ターミナルを立ち上げ直して下さい。これでpyenv + pyenv-virtualenvのインストールは完了です。 Set virtual environmentInstall minicondapython環境は全てpyenv-virtualenv上で管理しています。そうすることで環境の使い捨てが簡単になるので便利です。 1pyenv install miniconda3-4.2.122pyenv shell miniconda3-4.2.12 Create home environmentインストールしたminiconda上でcondaコマンドを使用すると、condaのバージョンが上がってpyenvがおかしくなります。それを防ぐために仮想home環境を作成し、そこをデフォルトの作業環境とします。 1conda create -n home python=3.62pyenv global miniconda3-4.2.12/envs/home Create test environmentあとはテーマ毎等で仮想環境を作って個別に管理します。そうすることで各環境を最小構成にすることができて干渉する心配もありません。ここでは試しにcalc環境を作成します。 1conda create -n calc python=3.62pyenv shell miniconda3-4.2.12/envs/calc3conda install -c rdkit rdkit 簡単ではありますが、以上でpythonの環境構築についての解説を終わります。何かご質問等ありましたらコメントにお願いします。","link":"/2019/12/09/pyenv/"},{"title":"リモートサーバ ー上のjupyter notebookをローカルPCで操作する","text":"ローカルPCではスペック不足のため、計算資源豊富なリモートサーバーでjupyter notebookを使いたいと思う人は結構いると思います。この記事ではそのためのjupyter notebookの設定方法について記載します。 前提とする環境 リモートサーバーにsshでログインしている。 リモートサーバ ー上にpython環境が構築してあり、jupyterがインストールされている。 リモートサーバ ーでのjupyter設定 jupyter notebookのconfigファイルを生成する 1jupyter notebook --generate-config これで以下の場所にconfigファイルができる。$HOME/.jupyter/jupyter_notebook_config.py 生成したconfigファイルの書き換えc.NotebookApp.~の項目が記載されている行を探し、アンコメントして以下の通り書き換える。 c.NotebookApp.ip = ‘localhost’c.NotebookApp.open_browser = Falsec.NotebookApp.port = 8889c.NotebookApp.token = u’’ 以上でサーバー側での設定は終わり。 ローカルPCからの操作 いつも通りsshする際に、ローカルフォワーディングする引数をつける。例ではlocalhostのポート8889番をリモートサーバーの8889番につないでいる。sshの引数は適宜追加して下さい。 1ssh -L 8889:localhost:8889 example.com このセッションを維持している状態で、jupyterを起動する。 普段使っているブラウザでhttp://localhost:8889/にアクセスするとリモートサーバで立ち上げたjupyter notebookに接続できる。 終わりに他にも色々と設定することは可能だが、今回紹介した方法が最低限の設定だと思います。もしセキュリティが不安だとか、もう少し細かく設定したいという場合は参照のリンク先をご覧ください。 参照 リモートサーバの Jupyter Notebook を SSH Port Forwarding 経由で使う Config file and command line options (Jupyter notebook document)","link":"/2019/12/12/remote-jupyter-notebook/"}],"tags":[{"name":"python","slug":"python","link":"/tags/python/"},{"name":"book_scanning","slug":"book-scanning","link":"/tags/book-scanning/"},{"name":"cheminformatics","slug":"cheminformatics","link":"/tags/cheminformatics/"},{"name":"rdkit","slug":"rdkit","link":"/tags/rdkit/"},{"name":"LaTeX","slug":"LaTeX","link":"/tags/LaTeX/"},{"name":"Word","slug":"Word","link":"/tags/Word/"},{"name":"Overleaf","slug":"Overleaf","link":"/tags/Overleaf/"},{"name":"setup","slug":"setup","link":"/tags/setup/"},{"name":"jupyter_notebook","slug":"jupyter-notebook","link":"/tags/jupyter-notebook/"}],"categories":[]}